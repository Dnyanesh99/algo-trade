
services:
  # TimescaleDB Database
  timescaledb:
    image: timescale/timescaledb:2.11.2-pg15
    container_name: algo-trade-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "-A md5"
      TS_TUNE_MEMORY: 2GB
      TS_TUNE_NUM_CPUS: 2
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./src/database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "15432:5432"
    networks:
      - algo-trade-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c work_mem=2MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=8MB
      -c default_statistics_target=50
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Algo Trading Application
  algo-trade-app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: algo-trade-app
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DBNAME=${DB_NAME}
      - DB_MIN_CONNECTIONS=${DB_MIN_CONNECTIONS}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS}
      - DB_TIMEOUT=${DB_TIMEOUT}
      - KITE_API_KEY=${KITE_API_KEY}
      - KITE_API_SECRET=${KITE_API_SECRET}
      - PYTHONPATH=/app
      - LD_LIBRARY_PATH=/usr/local/lib:/app/ta-lib/src/.libs:/usr/lib/x86_64-linux-gnu
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1
      - NUMEXPR_NUM_THREADS=1
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./models:/app/models
      - ./config:/app/config
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - algo-trade-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: algo-trade-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=2GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - algo-trade-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: algo-trade-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_DATABASE_WAL=false
      - GF_LOG_LEVEL=warn
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
      - timescaledb
    networks:
      - algo-trade-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Node Exporter for system metrics (lightweight)
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: algo-trade-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
      - '--web.max-requests=10'
    networks:
      - algo-trade-network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: algo-trade-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@timescaledb:5432/${DB_NAME}?sslmode=disable
      - PG_EXPORTER_DISABLE_DEFAULT_METRICS=false
      - PG_EXPORTER_DISABLE_SETTINGS_METRICS=true
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=false
    ports:
      - "9187:9187"
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - algo-trade-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'

volumes:
  timescaledb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/timescaledb
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

networks:
  algo-trade-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16